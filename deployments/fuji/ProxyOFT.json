{
  "address": "0x525795E4E78aA3c2E259fe1889cAB5AB2669b3e9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_from",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "CallOFTReceivedFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "CallOFTReceivedSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_receiver",
          "type": "bytes"
        }
      ],
      "name": "InvalidReceiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "NonContractAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryOFTReceivedSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBp",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultFeeBp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "dstchainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "feeBp",
          "type": "uint16"
        }
      ],
      "name": "SetFeeBp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeOwner",
          "type": "address"
        }
      ],
      "name": "SetFeeOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "SetUseCustomAdapterParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BP_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NO_EXTRA_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_SEND",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_SEND_AND_CALL",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToFeeBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "feeBP",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeBp",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendAndCallFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedOFTReceivedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outboundAmountSD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "quoteOFTFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_from",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryOFTReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        }
      ],
      "name": "sendAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        }
      ],
      "name": "sendFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_feeBp",
          "type": "uint16"
        }
      ],
      "name": "setDefaultFeeBp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "_feeBp",
          "type": "uint16"
        }
      ],
      "name": "setFeeBp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeOwner",
          "type": "address"
        }
      ],
      "name": "setFeeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "setUseCustomAdapterParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useCustomAdapterParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5cf2d457bc2e86ab2ec2f017963502f281e60214f0db3abdf93f49d38f8e2c0a",
  "receipt": {
    "to": null,
    "from": "0x28921b09dB1C7add63265e5ec79B008F0851D5DC",
    "contractAddress": "0x525795E4E78aA3c2E259fe1889cAB5AB2669b3e9",
    "transactionIndex": 0,
    "gasUsed": "4297553",
    "logsBloom": "0x
    "blockHash": "0xb97b733bdd5a9ca92ba43bb78b3931b3cc319c84db4fbb8acc8e9187e3e420e4",
    "transactionHash": "0x5cf2d457bc2e86ab2ec2f017963502f281e60214f0db3abdf93f49d38f8e2c0a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15520400,
        "transactionHash": "0x5cf2d457bc2e86ab2ec2f017963502f281e60214f0db3abdf93f49d38f8e2c0a",
        "address": "0x525795E4E78aA3c2E259fe1889cAB5AB2669b3e9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000028921b09db1c7add63265e5ec79b008f0851d5dc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb97b733bdd5a9ca92ba43bb78b3931b3cc319c84db4fbb8acc8e9187e3e420e4"
      }
    ],
    "blockNumber": 15520400,
    "cumulativeGasUsed": "4297553",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB450F59B371675546882a639a5d7708c978A82F2",
    "0x93f54D755A063cE7bB9e6Ac47Eccc8e33411d706"
  ],
  "numDeployments": 1,
  "solcInputHash": "c835a3cb83e9eb168b6d8b90b66b9fab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_from\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"CallOFTReceivedFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"CallOFTReceivedSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"}],\"name\":\"InvalidReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NonContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"RetryOFTReceivedSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBp\",\"type\":\"uint256\"}],\"name\":\"SetDefaultFeeBp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dstchainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"feeBp\",\"type\":\"uint16\"}],\"name\":\"SetFeeBp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeOwner\",\"type\":\"address\"}],\"name\":\"SetFeeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"SetUseCustomAdapterParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_EXTRA_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_SEND\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_SEND_AND_CALL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToFeeBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"feeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeBp\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendAndCallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedOFTReceivedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outboundAmountSD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"quoteOFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_from\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"}],\"name\":\"sendAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeBp\",\"type\":\"uint16\"}],\"name\":\"setDefaultFeeBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_feeBp\",\"type\":\"uint16\"}],\"name\":\"setFeeBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeOwner\",\"type\":\"address\"}],\"name\":\"setFeeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"setUseCustomAdapterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCustomAdapterParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"circulatingSupply()\":{\"details\":\"returns the circulating amount of tokens on current chain\"},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _amount - amount of the tokens to transfer _useZro - indicates to use zro to pay L0 fees _adapterParam - flexible bytes array to indicate messaging adapter services in L0\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendFrom(address,uint16,bytes,uint256,uint256,(address,address,bytes))\":{\"details\":\"send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from` `_from` the owner of token `_dstChainId` the destination chain identifier `_toAddress` can be any size depending on the `dstChainId`. `_amount` the quantity of tokens in wei `_minAmount` the minimum amount of tokens to receive on dstChain `_refundAddress` the address LayerZero refunds if too much message fee is sent `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"token()\":{\"details\":\"returns the address of the ERC20 token\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProxyOFT.sol\":\"ProxyOFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe9617a9f6db351b6ac4c9d5b1097798af59ad7f813e370e8cf69bb44addd8548\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x909bf72002c91806f39a64172c12b4188219e8649deefbe8d862604d4f9d3faf\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x9f057e6b7c9006828f7711122743dd068225d3d331989a6660a8f964b5977a1e\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x8da2c853945fbd9e3720975d33c6384f3f086a7f521a474953e78c3c87578e65\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/composable/IOFTReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiver {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _from, uint _amount, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x7b65ec67ebd242a7249348ccbdd0bea3cb5eccef738259c2db4d50d8f32bdb44\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function retryOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _from, address _to, uint _amount, bytes calldata _payload) external;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x153261095b3ee151547311809ee31d4864e224162f8f405eccaad63d8bf4e906\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTCoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"../../../util/ExcessivelySafeCall.sol\\\";\\nimport \\\"../composable/IOFTReceiver.sol\\\";\\n\\nabstract contract OFTCoreV2 is NonblockingLzApp {\\n    using BytesLib for bytes;\\n    using ExcessivelySafeCall for address;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint8 public constant PT_SEND = 0;\\n    uint8 public constant PT_SEND_AND_CALL = 1;\\n\\n    uint8 public immutable sharedDecimals;\\n\\n    bool public useCustomAdapterParams;\\n    \\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedOFTReceivedMessages;\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n\\n    event CallOFTReceivedFailure(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _from, address indexed _to, uint _amount, bytes _payload, bytes _reason);\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n\\n    event InvalidReceiver(bytes _receiver);\\n\\n    // _sharedDecimals should be the minimum decimals on all chains\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\\n        sharedDecimals = _sharedDecimals;\\n    }\\n\\n    // todo: lzapp?\\n    /************************************************************************\\n    * owner functions\\n    ************************************************************************/\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    /************************************************************************\\n    * internal functions\\n    ************************************************************************/\\n    function _estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _estimateSendAndCallFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendAndCall()\\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _retryOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _from, address _to, uint _amount, bytes calldata _payload) internal virtual {\\n        bytes32 msgHash = failedOFTReceivedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(msgHash != bytes32(0), \\\"OFTCore: no failed message to retry\\\");\\n\\n        bytes32 hash = keccak256(abi.encode(_from, _to, _amount, _payload));\\n        require(hash == msgHash, \\\"OFTCore: failed message hash mismatch\\\");\\n\\n        delete failedOFTReceivedMessages[_srcChainId][_srcAddress][_nonce];\\n        IOFTReceiver(_to).onOFTReceived(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\\n        emit RetryOFTReceivedSuccess(hash);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        uint8 packetType = _payload.toUint8(0);\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else if (packetType == PT_SEND_AND_CALL) {\\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        (amount,) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\\n\\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\\n        (bytes memory toAddress, uint64 amountSD) = _decodeSendPayload(_payload);\\n        (bool isValid, address to) = _safeConvertReceiverAddress(toAddress);\\n        if (!isValid) {\\n            emit InvalidReceiver(toAddress);\\n        }\\n\\n        uint amount = _sd2ld(amountSD);\\n        amount = _creditTo(_srcChainId, to, amount);\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _sendAndCall(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\\n\\n        (amount,) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\\n\\n        // encode the msg.sender into the payload instead of _from\\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAndCallAck(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual {\\n        (bytes memory from, bytes memory toAddress, uint64 amountSD, bytes memory payload, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\\n        (bool isValid, address to) = _safeConvertReceiverAddress(toAddress);\\n\\n        uint amount = _sd2ld(amountSD);\\n        amount = _creditTo(_srcChainId, to, amount);\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n\\n        if (!isValid) {\\n            emit InvalidReceiver(toAddress);\\n            return;\\n        }\\n\\n        if (!_isContract(to)) {\\n            emit NonContractAddress(to);\\n            return;\\n        }\\n\\n        _safeCallOnOFTReceived(_srcChainId, _srcAddress, _nonce, from, to, amount, payload, gasForCall);\\n    }\\n\\n    function _safeCallOnOFTReceived(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _from, address _to, uint _amount, bytes memory _payload, uint64 _gasForCall) internal virtual {\\n        (bool success, bytes memory reason) = _to.excessivelySafeCall(_gasForCall, 150, abi.encodeWithSelector(IOFTReceiver.onOFTReceived.selector, _srcChainId, _srcAddress, _nonce, _from, _amount, _payload));\\n        if (!success) {\\n            failedOFTReceivedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(abi.encode(_from, _to, _amount, _payload));\\n            emit CallOFTReceivedFailure(_srcChainId, _srcAddress, _nonce, _from, _to, _amount, _payload, reason);\\n        } else {\\n            bytes32 hash = keccak256(abi.encode(_from, _to, _amount, _payload));\\n            emit CallOFTReceivedSuccess(_srcChainId, _srcAddress, _nonce, hash);\\n        }\\n    }\\n\\n    function _safeConvertReceiverAddress(bytes memory _address) internal view virtual returns (bool, address) {\\n        if (_address.length != 20) {\\n            return (false, address(0xdead));\\n        }\\n\\n        address to = _address.toAddress(0);\\n        if (to == address(0)) {\\n            to = address(0xdead);\\n        }\\n        return (true, to);\\n    }\\n\\n    function _isContract(address _account) internal view returns (bool) {\\n        return _account.code.length > 0;\\n    }\\n\\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _ld2sd(uint _amount) internal virtual view returns (uint64) {\\n        uint amountSD = _amount / _ld2sdRate();\\n        require(amountSD <= type(uint64).max, \\\"OFTCore: amountSD overflow\\\");\\n        return uint64(amountSD);\\n    }\\n\\n    function _sd2ld(uint64 _amountSD) internal virtual view returns (uint) {\\n        return _amountSD * _ld2sdRate();\\n    }\\n\\n    function _removeDust(uint _amount) internal virtual view returns (uint amountAfter, uint dust) {\\n        dust = _amount % _ld2sdRate();\\n        amountAfter = _amount - dust;\\n    }\\n\\n    function _encodeSendPayload(bytes memory _toAddress, uint64 _amountSD) internal virtual view returns (bytes memory) {\\n        return abi.encodePacked(PT_SEND, uint8(_toAddress.length), _toAddress, _amountSD);\\n    }\\n\\n    function _decodeSendPayload(bytes memory _payload) internal virtual view returns (bytes memory to, uint64 amountSD) {\\n        require(_payload.toUint8(0) == PT_SEND, \\\"OFTCore: invalid payload\\\");\\n\\n        uint8 toAddressSize = _payload.toUint8(1);\\n        to = _payload.slice(2, toAddressSize);\\n        amountSD = _payload.toUint64(2 + toAddressSize);\\n    }\\n\\n    function _encodeSendAndCallPayload(address _from, bytes memory _toAddress, uint64 _amountSD, bytes calldata _payload, uint64 _dstGasForCall) internal virtual view returns (bytes memory) {\\n        return abi.encodePacked(\\n            PT_SEND_AND_CALL,\\n            uint8(_toAddress.length),\\n            _toAddress,\\n            _amountSD,\\n            uint8(20),\\n            _from,\\n            uint8(_payload.length),\\n            _payload,\\n            _dstGasForCall\\n        );\\n    }\\n\\n    function _decodeSendAndCallPayload(bytes memory _payload) internal virtual view returns (bytes memory from, bytes memory to, uint64 amountSD, bytes memory payload, uint64 dstGasForCall) {\\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \\\"OFTCore: invalid payload\\\");\\n\\n        // to address\\n        uint8 toAddressSize = _payload.toUint8(1);\\n        to = _payload.slice(2, toAddressSize);\\n\\n        // token amount\\n        amountSD = _payload.toUint64(2 + toAddressSize);\\n\\n        // from address\\n        uint8 fromAddressSize = _payload.toUint8(10 + toAddressSize);\\n        from = _payload.slice(11 + toAddressSize, fromAddressSize);\\n\\n        // payload\\n        uint8 payloadSize = _payload.toUint8(11 + toAddressSize + fromAddressSize);\\n        payload = _payload.slice(12 + toAddressSize + fromAddressSize, payloadSize);\\n\\n        // dst gas\\n        dstGasForCall = _payload.toUint64(12 + toAddressSize + fromAddressSize + payloadSize);\\n    }\\n\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _ld2sdRate() internal view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x88b031c7af24e6a77a00da8d5a3372129f5880f1d1bbe51d6205ac1b0e82cc9b\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/fee/BaseOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../OFTCoreV2.sol\\\";\\nimport \\\"./IOFTWithFee.sol\\\";\\nimport \\\"./Fee.sol\\\";\\n\\nabstract contract BaseOFTWithFee is OFTCoreV2, Fee, ERC165, IOFTWithFee {\\n\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) public payable virtual override {\\n        (_amount,) = _payOFTFee(_from, _dstChainId, _amount);\\n        _amount = _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n        require(_amount >= _minAmount, \\\"BaseOFTWithFee: amount is less than minAmount\\\");\\n    }\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) public payable virtual override {\\n        (_amount,) = _payOFTFee(_from, _dstChainId, _amount);\\n        _amount = _sendAndCall(_from, _dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n        require(_amount >= _minAmount, \\\"BaseOFTWithFee: amount is less than minAmount\\\");\\n    }\\n\\n    function retryOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _from, address _to, uint _amount, bytes calldata _payload) public virtual override {\\n        _retryOFTReceived(_srcChainId, _srcAddress, _nonce, _from, _to, _amount, _payload);\\n    }\\n\\n    /************************************************************************\\n    * public view functions\\n    ************************************************************************/\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTWithFee).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\\n    }\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint);\\n\\n    function token() public view virtual override returns (address);\\n}\\n\",\"keccak256\":\"0x00ad9dfb2cd15b86feb56bb3c0f69375ddebad2e934947484088883ac0c0e8cb\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/fee/Fee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Fee is Ownable {\\n    uint public constant BP_DENOMINATOR = 10000;\\n\\n    mapping(uint16 => FeeConfig) public chainIdToFeeBps;\\n    uint16 public defaultFeeBp;\\n    address public feeOwner; // defaults to owner\\n\\n    struct FeeConfig {\\n        uint16 feeBP;\\n        bool enabled;\\n    }\\n\\n    event SetFeeBp(uint16 dstchainId, bool enabled, uint16 feeBp);\\n    event SetDefaultFeeBp(uint feeBp);\\n    event SetFeeOwner(address feeOwner);\\n\\n    constructor(){\\n        feeOwner = owner();\\n    }\\n\\n    function setDefaultFeeBp(uint16 _feeBp) public virtual onlyOwner {\\n        require(_feeBp <= BP_DENOMINATOR, \\\"OFTFee: fee bp must be <= BP_DENOMINATOR\\\");\\n        defaultFeeBp = _feeBp;\\n        emit SetDefaultFeeBp(defaultFeeBp);\\n    }\\n\\n    function setFeeBp(uint16 _dstChainId, bool _enabled, uint16 _feeBp) public virtual onlyOwner {\\n        require(_feeBp <= BP_DENOMINATOR, \\\"OFTFee: fee bp must be <= BP_DENOMINATOR\\\");\\n        chainIdToFeeBps[_dstChainId] = FeeConfig(_feeBp, _enabled);\\n        emit SetFeeBp(_dstChainId, _enabled, _feeBp);\\n    }\\n\\n    function setFeeOwner(address _feeOwner) public virtual onlyOwner {\\n        require(_feeOwner != address(0x0), \\\"OFTFee: feeOwner cannot be 0x\\\");\\n        feeOwner = _feeOwner;\\n        emit SetFeeOwner(_feeOwner);\\n    }\\n\\n    function quoteOFTFee(uint16 _dstChainId, uint _amount) public virtual view returns (uint fee) {\\n        FeeConfig memory config = chainIdToFeeBps[_dstChainId];\\n        if (config.enabled) {\\n            fee = _amount * config.feeBP / BP_DENOMINATOR;\\n        } else if (defaultFeeBp > 0) {\\n            fee = _amount * defaultFeeBp / BP_DENOMINATOR;\\n        } else {\\n            fee = 0;\\n        }\\n    }\\n\\n    function _payOFTFee(address _from, uint16 _dstChainId, uint _amount) internal virtual returns (uint amount, uint fee) {\\n        fee = quoteOFTFee(_dstChainId, _amount);\\n        amount = _amount - fee;\\n        if (fee > 0) {\\n            _transferFrom(_from, feeOwner, fee);\\n        }\\n    }\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0xe9f378776fa6ddae310398d9b7798c504c57166d0cb1cac4faaeba74f27f5a31\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/fee/IOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTWithFee is ICommonOFT {\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_minAmount` the minimum amount of tokens to receive on dstChain\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0x020fc9ae9bb78bd09701660d9413bd900edccb42395bd05d0ff94df215496b0f\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/fee/ProxyOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./BaseOFTWithFee.sol\\\";\\n\\ncontract ProxyOFTWithFee is BaseOFTWithFee {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 internal immutable innerToken;\\n    uint internal immutable ld2sdRate;\\n\\n    // total amount in sd is transferred from this chain to other chains, ensuring the total is less than max of uint64\\n    uint64 public outboundAmountSD;\\n\\n    constructor(address _token, uint8 _sharedDecimals, address _lzEndpoint) BaseOFTWithFee(_sharedDecimals, _lzEndpoint) {\\n        innerToken = IERC20(_token);\\n\\n        (bool success, bytes memory data) = _token.staticcall(\\n            abi.encodeWithSignature(\\\"decimals()\\\")\\n        );\\n        require(success, \\\"ProxyOFT: failed to get token decimals\\\");\\n        uint8 decimals = abi.decode(data, (uint8));\\n\\n        require(_sharedDecimals <= decimals, \\\"ProxyOFT: sharedDecimals must be <= decimals\\\");\\n        ld2sdRate = 10 ** (decimals - _sharedDecimals);\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return innerToken.totalSupply() - innerToken.balanceOf(address(this));\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(innerToken);\\n    }\\n\\n    /************************************************************************\\n    * internal functions\\n    ************************************************************************/\\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override returns (uint) {\\n        uint before = innerToken.balanceOf(address(this));\\n        _transferFrom(_from, address(this), _amount);\\n        _amount = innerToken.balanceOf(address(this)) - before;\\n\\n        // _amount still may have dust if the token has transfer fee, then give the dust back to the sender\\n        (uint amount, uint dust) = _removeDust(_amount);\\n        if (dust > 0) innerToken.safeTransfer(_from, dust);\\n\\n        // check total outbound amount\\n        uint64 amountSD = _ld2sd(amount);\\n        require(type(uint64).max - outboundAmountSD >= amountSD, \\\"ProxyOFT: outboundAmountSD overflow\\\");\\n        outboundAmountSD += amountSD;\\n\\n        return amount;\\n    }\\n\\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\\n        outboundAmountSD -= _ld2sd(_amount);\\n        uint before = innerToken.balanceOf(_toAddress);\\n        innerToken.safeTransfer(_toAddress, _amount);\\n        return innerToken.balanceOf(_toAddress) - before;\\n    }\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override {\\n        require(_from == _msgSender(), \\\"ProxyOFT: owner is not send caller\\\");\\n        innerToken.safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function _ld2sdRate() internal view virtual override returns (uint) {\\n        return ld2sdRate;\\n    }\\n}\\n\",\"keccak256\":\"0x998b562b78efda4712cf49c24719831994df0a8057372275a595e6669ae350ab\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ProxyOFT.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/fee/ProxyOFTWithFee.sol\\\";\\n\\ncontract ProxyOFT is ProxyOFTWithFee {\\n    constructor(address _token, address _lzEndpoint) ProxyOFTWithFee(_token, 8, _lzEndpoint){}\\n}\",\"keccak256\":\"0x41db06205e98753ccfeb0c441efd5b5aa87f49ec6cadfa4a9e255b4dd9e85122\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620050fb380380620050fb8339810160408190526200003591620002a2565b816008828181818180806200004a3362000235565b6001600160a01b0316608052505060ff1660a052620000716000546001600160a01b031690565b600880546001600160a01b03928316620100000262010000600160b01b0319909116179055851660c081905260408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009450849350620000da9190620002da565b600060405180830381855afa9150503d806000811462000117576040519150601f19603f3d011682016040523d82523d6000602084013e6200011c565b606091505b509150915081620001835760405162461bcd60e51b815260206004820152602660248201527f50726f78794f46543a206661696c656420746f2067657420746f6b656e20646560448201526563696d616c7360d01b60648201526084015b60405180910390fd5b6000818060200190518101906200019b919062000318565b90508060ff168560ff1611156200020a5760405162461bcd60e51b815260206004820152602c60248201527f50726f78794f46543a20736861726564446563696d616c73206d75737420626560448201526b203c3d20646563696d616c7360a01b60648201526084016200017a565b6200021685826200035a565b6200022390600a6200047f565b60e05250620004909650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200029d57600080fd5b919050565b60008060408385031215620002b657600080fd5b620002c18362000285565b9150620002d16020840162000285565b90509250929050565b6000825160005b81811015620002fd5760208186018101518583015201620002e1565b818111156200030d576000828501525b509190910192915050565b6000602082840312156200032b57600080fd5b815160ff811681146200033d57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101562000377576200037762000344565b90039392505050565b600181815b80851115620003c1578160001904821115620003a557620003a562000344565b80851615620003b357918102915b93841c939080029062000385565b509250929050565b600082620003da5750600162000479565b81620003e95750600062000479565b81600181146200040257600281146200040d576200042d565b600191505062000479565b60ff84111562000421576200042162000344565b50506001821b62000479565b5060208310610133831016604e8410600b841016171562000452575081810a62000479565b6200045e838362000380565b806000190482111562000475576200047562000344565b0290505b92915050565b60006200033d60ff841683620003c9565b60805160a05160c05160e051614ba562000556600039600081816125d801528181612a0a0152612f5f015260008181610934015281816111a3015281816112180152818161295b01528181612a6401528181612af301528181612b9601528181612fe20152818161308b01526130d3015260006105490152600081816106c40152818161095b01528181610be101528181610c6a01528181610daf015281816115ae01528181611bc101528181611e0e015281816121bb0152612dc70152614ba56000f3fe60806040526004361061027c5760003560e01c8063a65f92731161014f578063d1d55d89116100c1578063eb8d72b71161007a578063eb8d72b71461088b578063ecd8f212146108ab578063ed629c5c146108cb578063f2fde38b146108e5578063f5ecbdbc14610905578063fc0c546a1461092557600080fd5b8063d1d55d89146107e2578063d1deba1f146107f5578063d888296814610808578063df2a5b3b14610836578063e6a20ae614610856578063eab45d9c1461086b57600080fd5b8063b9818be111610113578063b9818be1146106e6578063baf3292d1461070c578063c83330ce1461072c578063c8598dca14610782578063cbed8b9c146107a2578063cfd6528e146107c257600080fd5b8063a65f92731461062a578063a6c3d16514610669578063abe685cd14610689578063b214dd291461069f578063b353aaa7146106b257600080fd5b80635b8c41e6116101f3578063857749b0116101ac578063857749b0146105375780638cfd8f5c1461056b5780638da5cb5b146105a35780639358928b146105d5578063950c8a74146105ea5780639f38369a1461060a57600080fd5b80635b8c41e6146104175780636096cc581461046657806366ad5c8a146104b5578063715018a6146104d55780637533d788146104ea57806379c0ad4b1461051757600080fd5b80633d8b38f6116102455780633d8b38f61461034d57806342d65a8d1461036d578063447705151461038d5780634b104eff146103b05780634c42899a146103d05780635a359dc5146103f757600080fd5b80621d35671461028157806301ffc9a7146102a357806307e0db17146102d857806310ddb137146102f85780632a205e3d14610318575b600080fd5b34801561028d57600080fd5b506102a161029c366004613ae3565b610958565b005b3480156102af57600080fd5b506102c36102be366004613b76565b610b89565b60405190151581526020015b60405180910390f35b3480156102e457600080fd5b506102a16102f3366004613ba0565b610bc0565b34801561030457600080fd5b506102a1610313366004613ba0565b610c49565b34801561032457600080fd5b50610338610333366004613bc9565b610ca1565b604080519283526020830191909152016102cf565b34801561035957600080fd5b506102c3610368366004613c67565b610cc3565b34801561037957600080fd5b506102a1610388366004613c67565b610d90565b34801561039957600080fd5b506103a2600081565b6040519081526020016102cf565b3480156103bc57600080fd5b506102a16103cb366004613cd9565b610e16565b3480156103dc57600080fd5b506103e5600081565b60405160ff90911681526020016102cf565b34801561040357600080fd5b506102a1610412366004613ba0565b610ed3565b34801561042357600080fd5b506103a2610432366004613d63565b6004602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561047257600080fd5b506103a2610481366004613d63565b6006602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156104c157600080fd5b506102a16104d0366004613ae3565b610f45565b3480156104e157600080fd5b506102a1611021565b3480156104f657600080fd5b5061050a610505366004613ba0565b611035565b6040516102cf9190613e5b565b34801561052357600080fd5b506102a1610532366004613e6e565b6110cf565b34801561054357600080fd5b506103e57f000000000000000000000000000000000000000000000000000000000000000081565b34801561057757600080fd5b506103a2610586366004613eaa565b600260209081526000928352604080842090915290825290205481565b3480156105af57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102cf565b3480156105e157600080fd5b506103a261118b565b3480156105f657600080fd5b506003546105bd906001600160a01b031681565b34801561061657600080fd5b5061050a610625366004613ba0565b6112a7565b34801561063657600080fd5b5060085461065190600160b01b90046001600160401b031681565b6040516001600160401b0390911681526020016102cf565b34801561067557600080fd5b506102a1610684366004613c67565b6113b7565b34801561069557600080fd5b506103a261271081565b6102a16106ad366004613ef5565b61143d565b3480156106be57600080fd5b506105bd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106f257600080fd5b506008546105bd906201000090046001600160a01b031681565b34801561071857600080fd5b506102a1610727366004613cd9565b611511565b34801561073857600080fd5b50610768610747366004613ba0565b60076020526000908152604090205461ffff81169062010000900460ff1682565b6040805161ffff90931683529015156020830152016102cf565b34801561078e57600080fd5b5061033861079d366004613f94565b611567565b3480156107ae57600080fd5b506102a16107bd366004614072565b61158f565b3480156107ce57600080fd5b506102a16107dd3660046140e0565b611624565b6102a16107f0366004614198565b611642565b6102a1610803366004613ae3565b61171a565b34801561081457600080fd5b506008546108239061ffff1681565b60405161ffff90911681526020016102cf565b34801561084257600080fd5b506102a1610851366004614273565b611930565b34801561086257600080fd5b506103e5600181565b34801561087757600080fd5b506102a16108863660046142af565b6119e2565b34801561089757600080fd5b506102a16108a6366004613c67565b611a2b565b3480156108b757600080fd5b506103a26108c63660046142cc565b611a85565b3480156108d757600080fd5b506005546102c39060ff1681565b3480156108f157600080fd5b506102a1610900366004613cd9565b611b17565b34801561091157600080fd5b5061050a6109203660046142f6565b611b90565b34801561093157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006105bd565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109d55760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff8616600090815260016020526040812080546109f390614343565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1f90614343565b8015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b50505050509050805186869050148015610a87575060008151115b8015610aaf575080516020820120604051610aa59088908890614378565b6040518091039020145b610b0a5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b60648201526084016109cc565b610b808787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250611c4192505050565b50505050505050565b60006001600160e01b0319821663031e0c0560e51b1480610bba57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610bc8611d4b565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b5050505050565b610c51611d4b565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610c14565b600080610cb389898989898989611da5565b9150915097509795505050505050565b61ffff831660009081526001602052604081208054829190610ce490614343565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1090614343565b8015610d5d5780601f10610d3257610100808354040283529160200191610d5d565b820191906000526020600020905b815481529060010190602001808311610d4057829003601f168201915b505050505090508383604051610d74929190614378565b60405180910390208180519060200120149150505b9392505050565b610d98611d4b565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610de8908690869086906004016143b1565b600060405180830381600087803b158015610e0257600080fd5b505af1158015610b80573d6000803e3d6000fd5b610e1e611d4b565b6001600160a01b038116610e745760405162461bcd60e51b815260206004820152601d60248201527f4f46544665653a206665654f776e65722063616e6e6f7420626520307800000060448201526064016109cc565b6008805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527f047912631afa564eebd3db2efe191a0dec62da1fede6bbbc1ffc89d87845b1b5906020015b60405180910390a150565b610edb611d4b565b6127108161ffff161115610f015760405162461bcd60e51b81526004016109cc906143cf565b6008805461ffff191661ffff83169081179091556040519081527fd56fd0f83a512cb4e34baf78b277f71fe2e27ccfc0e1c469c345f4cee340766290602001610ec8565b333014610fa35760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b60648201526084016109cc565b6110198686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250611e9e92505050565b505050505050565b611029611d4b565b6110336000611f25565b565b6001602052600090815260409020805461104e90614343565b80601f016020809104026020016040519081016040528092919081815260200182805461107a90614343565b80156110c75780601f1061109c576101008083540402835291602001916110c7565b820191906000526020600020905b8154815290600101906020018083116110aa57829003601f168201915b505050505081565b6110d7611d4b565b6127108161ffff1611156110fd5760405162461bcd60e51b81526004016109cc906143cf565b60408051808201825261ffff83811680835285151560208085018281528985166000818152600784528890209651875492511515620100000262ffffff1990931696169590951717909455845192835292820192909252918201527fdd9c9685af3e6dcb56d8f4b88d2595d4add6837a150034e7781c46b6dcf8aaab906060015b60405180910390a1505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190614417565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190614417565b6112a29190614446565b905090565b61ffff81166000908152600160205260408120805460609291906112ca90614343565b80601f01602080910402602001604051908101604052809291908181526020018280546112f690614343565b80156113435780601f1061131857610100808354040283529160200191611343565b820191906000526020600020905b81548152906001019060200180831161132657829003601f168201915b5050505050905080516000141561139c5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f726400000060448201526064016109cc565b610d896000601483516113af9190614446565b839190611f75565b6113bf611d4b565b8181306040516020016113d49392919061445d565b60408051601f1981840301815291815261ffff8516600090815260016020908152919020825161140993919290910190613960565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce83838360405161117e939291906143b1565b611448878785612082565b50809350506114ef878787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992506114989150506020870187613cd9565b6114a86040880160208901613cd9565b6114b56040890189614483565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120c992505050565b925081831015610b805760405162461bcd60e51b81526004016109cc906144c9565b611519611d4b565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610ec8565b60008061157c8c8c8c8c8c8c8c8c8c8c612164565b915091509a509a98505050505050505050565b611597611d4b565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906115eb9088908890889088908890600401614516565b600060405180830381600087803b15801561160557600080fd5b505af1158015611619573d6000803e3d6000fd5b505050505050505050565b6116368a8a8a8a8a8a8a8a8a8a612263565b50505050505050505050565b61164d8a8a88612082565b50809650506116f88a8a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508a9150899050886116a160208a018a613cd9565b6116b160408b0160208c01613cd9565b6116be60408c018c614483565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061249592505050565b9550848610156116365760405162461bcd60e51b81526004016109cc906144c9565b61ffff8616600090815260046020526040808220905161173d9088908890614378565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806117bd5760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b60648201526084016109cc565b8083836040516117ce929190614378565b60405180910390201461182d5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b60648201526084016109cc565b61ffff871660009081526004602052604080822090516118509089908990614378565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f880182900482028301820190528682526118e8918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250611e9e92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e5878787878560405161191f959493929190614544565b60405180910390a150505050505050565b611938611d4b565b600081116119805760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b60448201526064016109cc565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac09060600161117e565b6119ea611d4b565b6005805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490602001610ec8565b611a33611d4b565b61ffff83166000908152600160205260409020611a519083836139e4565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161117e939291906143b1565b61ffff828116600090815260076020908152604080832081518083019092525493841681526201000090930460ff1615801591840191909152909190611aea57805161271090611ad99061ffff168561457f565b611ae391906145b4565b9150611b10565b60085461ffff1615611b0b5760085461271090611ad99061ffff168561457f565b600091505b5092915050565b611b1f611d4b565b6001600160a01b038116611b845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109cc565b611b8d81611f25565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015611c10573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c3891908101906145c8565b95945050505050565b600080611ca45a60966366ad5c8a60e01b89898989604051602401611c699493929190614635565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190612546565b9150915081611019578280519060200120600460008861ffff1661ffff16815260200190815260200160002086604051611cde9190614673565b9081526040805191829003602090810183206001600160401b0389166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90611d3b908890889088908890879061468f565b60405180910390a1505050505050565b6000546001600160a01b031633146110335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109cc565b6000806000611df489898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611def92508b91506125d09050565b612656565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090611e4d908d90309086908c908c908c906004016146ed565b6040805180830381865afa158015611e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8d9190614743565b925092505097509795505050505050565b6000611eaa8282612688565b905060ff8116611ec557611ec0858585856126e4565b610c42565b60ff811660011415611edd57611ec0858585856127ae565b60405162461bcd60e51b815260206004820152601c60248201527f4f4654436f72653a20756e6b6e6f776e207061636b657420747970650000000060448201526064016109cc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081611f8381601f614767565b1015611fc25760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016109cc565b611fcc8284614767565b845110156120105760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016109cc565b60608215801561202f5760405191506000825260208201604052612079565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612068578051835260209283019201612050565b5050858452601f01601f1916604052505b50949350505050565b60008061208f8484611a85565b905061209b8184614446565b915080156120c1576008546120c19086906201000090046001600160a01b0316836128eb565b935093915050565b60006120d787828481612988565b6120e085612a02565b5090506120ef88888884612a42565b9050600061210087611def846125d0565b9050612110888287878734612ca8565b886001600160a01b03168861ffff167f39a4c66499bcf4b56d79f0dde8ed7a9d4925a0df55825206b2b8531e202be0d0898560405161215092919061477f565b60405180910390a350979650505050505050565b60008060006121b7338d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506121af92508f91506125d09050565b8c8c8c612e35565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340a7bb108e30848a8a8a6040518763ffffffff1660e01b815260040161220f969594939291906146ed565b6040805180830381865afa15801561222b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224f9190614743565b92509250509a509a98505050505050505050565b61ffff8a166000908152600660205260408082209051612286908c908c90614378565b90815260408051602092819003830190206001600160401b038b16600090815292529020549050806123065760405162461bcd60e51b815260206004820152602360248201527f4f4654436f72653a206e6f206661696c6564206d65737361676520746f20726560448201526274727960e81b60648201526084016109cc565b6000878787878787604051602001612323969594939291906147a1565b6040516020818303038152906040528051906020012090508181146123985760405162461bcd60e51b815260206004820152602560248201527f4f4654436f72653a206661696c6564206d6573736167652068617368206d69736044820152640dac2e8c6d60db1b60648201526084016109cc565b61ffff8c166000908152600660205260409081902090516123bc908d908d90614378565b9081526040805191829003602090810183206001600160401b038d16600090815291529081205563147a7d7160e01b81526001600160a01b0387169063147a7d719061241c908f908f908f908f908f908f908e908e908e906004016147de565b600060405180830381600087803b15801561243657600080fd5b505af115801561244a573d6000803e3d6000fd5b505050507f41ea88d75e53240e2c5ace3a3d7263efe6c8f4fe42c0e3ef269f71daef1001c88160405161247f91815260200190565b60405180910390a1505050505050505050505050565b60006124ad8a6001846001600160401b038916612988565b6124b688612a02565b5090506124c58b8b8b84612a42565b905060006124df338b6124d7856125d0565b8b8b8b612e35565b90506124ef8b8287878734612ca8565b8b6001600160a01b03168b61ffff167f39a4c66499bcf4b56d79f0dde8ed7a9d4925a0df55825206b2b8531e202be0d08c8560405161252f92919061477f565b60405180910390a3509a9950505050505050505050565b6000606060008060008661ffff166001600160401b0381111561256b5761256b613cf6565b6040519080825280601f01601f191660200182016040528015612595576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156125b7578692505b828152826000602083013e909890975095505050505050565b6000806125fd7f0000000000000000000000000000000000000000000000000000000000000000846145b4565b90506001600160401b03811115610bba5760405162461bcd60e51b815260206004820152601a60248201527f4f4654436f72653a20616d6f756e745344206f766572666c6f7700000000000060448201526064016109cc565b60606000835184846040516020016126719493929190614849565b604051602081830303815290604052905092915050565b6000612695826001614767565b835110156126db5760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b60448201526064016109cc565b50016001015190565b6000806126f083612e79565b9150915060008061270084612f13565b9150915081612741577fa3c8cf09cc0c729a96662c0de5e58fad3e4df68c58c29ab1f90982adfc992169846040516127389190613e5b565b60405180910390a15b600061274c84612f58565b9050612759898383612f8d565b9050816001600160a01b03168961ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8360405161279b91815260200190565b60405180910390a3505050505050505050565b60008060008060006127bf8661314a565b945094509450945094506000806127d586612f13565b9150915060006127e486612f58565b90506127f18c8383612f8d565b9050816001600160a01b03168c61ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8360405161283391815260200190565b60405180910390a382612884577fa3c8cf09cc0c729a96662c0de5e58fad3e4df68c58c29ab1f90982adfc9921698760405161286f9190613e5b565b60405180910390a150505050505050506128e5565b6001600160a01b0382163b6128cc576040516001600160a01b03831681527f9aedf5fdba8716db3b6705ca00150643309995d4f818a249ed6dde6677e7792d9060200161286f565b6128dc8c8c8c8b86868b8b6132aa565b50505050505050505b50505050565b6001600160a01b038316331461294e5760405162461bcd60e51b815260206004820152602260248201527f50726f78794f46543a206f776e6572206973206e6f742073656e642063616c6c60448201526132b960f11b60648201526084016109cc565b6129836001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848484613475565b505050565b60055460ff16156129a45761299f848484846134e0565b6128e5565b8151156128e55760405162461bcd60e51b815260206004820152602660248201527f4f4654436f72653a205f61646170746572506172616d73206d7573742062652060448201526532b6b83a3c9760d11b60648201526084016109cc565b600080612a2f7f00000000000000000000000000000000000000000000000000000000000000008461489f565b9050612a3b8184614446565b9150915091565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612acf9190614417565b9050612adc8630856128eb565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b669190614417565b612b709190614446565b9250600080612b7e85612a02565b90925090508015612bbd57612bbd6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001689836135bf565b6000612bc8836125d0565b6008549091506001600160401b0380831691612bee91600160b01b9091048116906148b3565b6001600160401b03161015612c515760405162461bcd60e51b815260206004820152602360248201527f50726f78794f46543a206f7574626f756e64416d6f756e745344206f766572666044820152626c6f7760e81b60648201526084016109cc565b80600860168282829054906101000a90046001600160401b0316612c7591906148db565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555082945050505050949350505050565b61ffff861660009081526001602052604081208054612cc690614343565b80601f0160208091040260200160405190810160405280929190818152602001828054612cf290614343565b8015612d3f5780601f10612d1457610100808354040283529160200191612d3f565b820191906000526020600020905b815481529060010190602001808311612d2257829003601f168201915b50505050509050805160001415612db15760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b60648201526084016109cc565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490612e08908b9086908c908c908c908c90600401614906565b6000604051808303818588803b158015612e2157600080fd5b505af11580156128dc573d6000803e3d6000fd5b8451604051606091612e5e9160019190899089906014908d908a908c9082908c90602001614960565b60405160208183030381529060405290509695505050505050565b6060600080612e888482612688565b60ff1614612ed35760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b60448201526064016109cc565b6000612ee0846001612688565b9050612ef184600260ff8416611f75565b9250612f0b612f01826002614a0a565b859060ff166135ef565b915050915091565b6000808251601414612f2c575060009261dead92509050565b6000612f38848261364c565b90506001600160a01b038116612f4d575061dead5b600194909350915050565b6000610bba7f00000000000000000000000000000000000000000000000000000000000000006001600160401b03841661457f565b6000612f98826125d0565b60088054601690612fba908490600160b01b90046001600160401b03166148b3565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161303b91906001600160a01b0391909116815260200190565b602060405180830381865afa158015613058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307c9190614417565b90506130b26001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685856135bf565b6040516370a0823160e01b81526001600160a01b03858116600483015282917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa15801561311c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131409190614417565b611c389190614446565b60608060008181600161315d8783612688565b60ff16146131a85760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b60448201526064016109cc565b60006131b5876001612688565b90506131c687600260ff8416611f75565b94506131e06131d6826002614a0a565b889060ff166135ef565b935060006131fc6131f283600a614a0a565b899060ff16612688565b905061321b61320c83600b614a0a565b899060ff908116908416611f75565b965060006132428261322e85600b614a0a565b6132389190614a0a565b8a9060ff16612688565b905061326c8261325385600c614a0a565b61325d9190614a0a565b8a9060ff908116908416611f75565b945061329c818361327e86600c614a0a565b6132889190614a0a565b6132929190614a0a565b8a9060ff166135ef565b935050505091939590929450565b600080613323836001600160401b0316609663147a7d7160e01b8d8d8d8d8c8c6040516024016132df96959493929190614a2f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b038a16929190612546565b91509150816133f757868686866040516020016133439493929190614a87565b60408051601f19818403018152828252805160209182012061ffff8e1660009081526006909252919020909161337a908c90614673565b9081526040805191829003602090810183206001600160401b038d166000908152915220919091556001600160a01b0387169061ffff8c16907f95c1ad3ef50dd05e668d7b80e9a723079395ac4867a4050552d5d9219e683d74906133ea908d908d908d908c908c908a90614ac2565b60405180910390a3611636565b6000878787876040516020016134109493929190614a87565b6040516020818303038152906040528051906020012090508a61ffff167fb8890edbfc1c74692f527444645f95489c3703cc2df42e4a366f5d06fa6cd8848b8b8460405161346093929190614b24565b60405180910390a25050505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526128e59085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526136b1565b60006134eb83613783565b61ffff80871660009081526002602090815260408083209389168352929052908120549192509061351d908490614767565b90506000811161356f5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f742073657400000000000060448201526064016109cc565b808210156110195760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f77000000000060448201526064016109cc565b6040516001600160a01b03831660248201526044810182905261298390849063a9059cbb60e01b906064016134a9565b60006135fc826008614767565b835110156136435760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b60448201526064016109cc565b50016008015190565b6000613659826014614767565b835110156136a15760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016109cc565b500160200151600160601b900490565b6000613706826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137df9092919063ffffffff16565b80519091501561298357808060200190518101906137249190614b52565b6129835760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109cc565b60006022825110156137d75760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d730000000060448201526064016109cc565b506022015190565b60606137ee84846000856137f6565b949350505050565b6060824710156138575760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109cc565b6001600160a01b0385163b6138ae5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109cc565b600080866001600160a01b031685876040516138ca9190614673565b60006040518083038185875af1925050503d8060008114613907576040519150601f19603f3d011682016040523d82523d6000602084013e61390c565b606091505b509150915061391c828286613927565b979650505050505050565b60608315613936575081610d89565b8251156139465782518084602001fd5b8160405162461bcd60e51b81526004016109cc9190613e5b565b82805461396c90614343565b90600052602060002090601f01602090048101928261398e57600085556139d4565b82601f106139a757805160ff19168380011785556139d4565b828001600101855582156139d4579182015b828111156139d45782518255916020019190600101906139b9565b506139e0929150613a58565b5090565b8280546139f090614343565b90600052602060002090601f016020900481019282613a1257600085556139d4565b82601f10613a2b5782800160ff198235161785556139d4565b828001600101855582156139d4579182015b828111156139d4578235825591602001919060010190613a3d565b5b808211156139e05760008155600101613a59565b803561ffff81168114613a7f57600080fd5b919050565b60008083601f840112613a9657600080fd5b5081356001600160401b03811115613aad57600080fd5b602083019150836020828501011115613ac557600080fd5b9250929050565b80356001600160401b0381168114613a7f57600080fd5b60008060008060008060808789031215613afc57600080fd5b613b0587613a6d565b955060208701356001600160401b0380821115613b2157600080fd5b613b2d8a838b01613a84565b9097509550859150613b4160408a01613acc565b94506060890135915080821115613b5757600080fd5b50613b6489828a01613a84565b979a9699509497509295939492505050565b600060208284031215613b8857600080fd5b81356001600160e01b031981168114610d8957600080fd5b600060208284031215613bb257600080fd5b610d8982613a6d565b8015158114611b8d57600080fd5b600080600080600080600060a0888a031215613be457600080fd5b613bed88613a6d565b965060208801356001600160401b0380821115613c0957600080fd5b613c158b838c01613a84565b909850965060408a0135955060608a01359150613c3182613bbb565b90935060808901359080821115613c4757600080fd5b50613c548a828b01613a84565b989b979a50959850939692959293505050565b600080600060408486031215613c7c57600080fd5b613c8584613a6d565b925060208401356001600160401b03811115613ca057600080fd5b613cac86828701613a84565b9497909650939450505050565b6001600160a01b0381168114611b8d57600080fd5b8035613a7f81613cb9565b600060208284031215613ceb57600080fd5b8135610d8981613cb9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613d3457613d34613cf6565b604052919050565b60006001600160401b03821115613d5557613d55613cf6565b50601f01601f191660200190565b600080600060608486031215613d7857600080fd5b613d8184613a6d565b925060208401356001600160401b03811115613d9c57600080fd5b8401601f81018613613dad57600080fd5b8035613dc0613dbb82613d3c565b613d0c565b818152876020838501011115613dd557600080fd5b81602084016020830137600060208383010152809450505050613dfa60408501613acc565b90509250925092565b60005b83811015613e1e578181015183820152602001613e06565b838111156128e55750506000910152565b60008151808452613e47816020860160208601613e03565b601f01601f19169290920160200192915050565b602081526000610d896020830184613e2f565b600080600060608486031215613e8357600080fd5b613e8c84613a6d565b92506020840135613e9c81613bbb565b9150613dfa60408501613a6d565b60008060408385031215613ebd57600080fd5b613ec683613a6d565b9150613ed460208401613a6d565b90509250929050565b600060608284031215613eef57600080fd5b50919050565b600080600080600080600060c0888a031215613f1057600080fd5b8735613f1b81613cb9565b9650613f2960208901613a6d565b955060408801356001600160401b0380821115613f4557600080fd5b613f518b838c01613a84565b909750955060608a0135945060808a0135935060a08a0135915080821115613f7857600080fd5b50613f858a828b01613edd565b91505092959891949750929550565b60008060008060008060008060008060e08b8d031215613fb357600080fd5b613fbc8b613a6d565b995060208b01356001600160401b0380821115613fd857600080fd5b613fe48e838f01613a84565b909b50995060408d0135985060608d013591508082111561400457600080fd5b6140108e838f01613a84565b909850965086915061402460808e01613acc565b955060a08d0135915061403682613bbb565b90935060c08c0135908082111561404c57600080fd5b506140598d828e01613a84565b915080935050809150509295989b9194979a5092959850565b60008060008060006080868803121561408a57600080fd5b61409386613a6d565b94506140a160208701613a6d565b93506040860135925060608601356001600160401b038111156140c357600080fd5b6140cf88828901613a84565b969995985093965092949392505050565b60008060008060008060008060008060e08b8d0312156140ff57600080fd5b6141088b613a6d565b995060208b01356001600160401b038082111561412457600080fd5b6141308e838f01613a84565b909b50995089915061414460408e01613acc565b985060608d013591508082111561415a57600080fd5b6141668e838f01613a84565b909850965060808d0135915061417b82613cb9565b90945060a08c0135935060c08c0135908082111561404c57600080fd5b6000806000806000806000806000806101008b8d0312156141b857600080fd5b6141c18b613cce565b99506141cf60208c01613a6d565b985060408b01356001600160401b03808211156141eb57600080fd5b6141f78e838f01613a84565b909a50985060608d0135975060808d0135965060a08d013591508082111561421e57600080fd5b61422a8e838f01613a84565b909650945084915061423e60c08e01613acc565b935060e08d013591508082111561425457600080fd5b506142618d828e01613edd565b9150509295989b9194979a5092959850565b60008060006060848603121561428857600080fd5b61429184613a6d565b925061429f60208501613a6d565b9150604084013590509250925092565b6000602082840312156142c157600080fd5b8135610d8981613bbb565b600080604083850312156142df57600080fd5b6142e883613a6d565b946020939093013593505050565b6000806000806080858703121561430c57600080fd5b61431585613a6d565b935061432360208601613a6d565b9250604085013561433381613cb9565b9396929550929360600135925050565b600181811c9082168061435757607f821691505b60208210811415613eef57634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000611c38604083018486614388565b60208082526028908201527f4f46544665653a20666565206270206d757374206265203c3d2042505f44454e60408201526727a6a4a720aa27a960c11b606082015260800190565b60006020828403121561442957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561445857614458614430565b500390565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b6000808335601e1984360301811261449a57600080fd5b8301803591506001600160401b038211156144b457600080fd5b602001915036819003821315613ac557600080fd5b6020808252602d908201527f426173654f4654576974684665653a20616d6f756e74206973206c657373207460408201526c1a185b881b5a5b905b5bdd5b9d609a1b606082015260800190565b600061ffff80881683528087166020840152508460408301526080606083015261391c608083018486614388565b61ffff86168152608060208201526000614562608083018688614388565b6001600160401b0394909416604083015250606001529392505050565b600081600019048311821515161561459957614599614430565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826145c3576145c361459e565b500490565b6000602082840312156145da57600080fd5b81516001600160401b038111156145f057600080fd5b8201601f8101841361460157600080fd5b805161460f613dbb82613d3c565b81815285602083850101111561462457600080fd5b611c38826020830160208601613e03565b61ffff851681526080602082015260006146526080830186613e2f565b6001600160401b0385166040840152828103606084015261391c8185613e2f565b60008251614685818460208701613e03565b9190910192915050565b61ffff8616815260a0602082015260006146ac60a0830187613e2f565b6001600160401b038616604084015282810360608401526146cd8186613e2f565b905082810360808401526146e18185613e2f565b98975050505050505050565b61ffff871681526001600160a01b038616602082015260a06040820181905260009061471b90830187613e2f565b85151560608401528281036080840152614736818587614388565b9998505050505050505050565b6000806040838503121561475657600080fd5b505080516020909101519092909150565b6000821982111561477a5761477a614430565b500190565b6040815260006147926040830185613e2f565b90508260208301529392505050565b6080815260006147b560808301888a614388565b6001600160a01b0387166020840152604083018690528281036060840152614736818587614388565b61ffff8a16815260c0602082015260006147fc60c083018a8c614388565b6001600160401b0389166040840152828103606084015261481e81888a614388565b905085608084015282810360a0840152614839818587614388565b9c9b505050505050505050505050565b600060ff60f81b808760f81b168352808660f81b166001840152508351614877816002850160208801613e03565b60c09390931b6001600160c01b03191660029290930191820192909252600a01949350505050565b6000826148ae576148ae61459e565b500690565b60006001600160401b03838116908316818110156148d3576148d3614430565b039392505050565b60006001600160401b038083168185168083038211156148fd576148fd614430565b01949350505050565b61ffff8716815260c06020820152600061492360c0830188613e2f565b82810360408401526149358188613e2f565b6001600160a01b0387811660608601528616608085015283810360a085015290506147368185613e2f565b600060ff60f81b808d60f81b168352808c60f81b1660018401528a5161498d816002860160208f01613e03565b60c08b901b6001600160c01b03191660029185019182015260f88a811b8316600a83015260608a901b6bffffffffffffffffffffffff1916600b83015288901b8216601f8201528587602083013760c085901b6001600160c01b031916908601602081019182529150506028019c9b505050505050505050505050565b600060ff821660ff84168060ff03821115614a2757614a27614430565b019392505050565b61ffff8716815260c060208201526000614a4c60c0830188613e2f565b6001600160401b03871660408401528281036060840152614a6d8187613e2f565b905084608084015282810360a08401526147368185613e2f565b608081526000614a9a6080830187613e2f565b6001600160a01b038616602084015260408301859052828103606084015261391c8185613e2f565b60c081526000614ad560c0830189613e2f565b6001600160401b03881660208401528281036040840152614af68188613e2f565b90508560608401528281036080840152614b108186613e2f565b905082810360a08401526147368185613e2f565b606081526000614b376060830186613e2f565b6001600160401b039490941660208301525060400152919050565b600060208284031215614b6457600080fd5b8151610d8981613bbb56fea264697066735822122055c9454c0a18beaa8702d75fcb3b4e7eda1a2f6ff47e80e460324bf5baada6b164736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061027c5760003560e01c8063a65f92731161014f578063d1d55d89116100c1578063eb8d72b71161007a578063eb8d72b71461088b578063ecd8f212146108ab578063ed629c5c146108cb578063f2fde38b146108e5578063f5ecbdbc14610905578063fc0c546a1461092557600080fd5b8063d1d55d89146107e2578063d1deba1f146107f5578063d888296814610808578063df2a5b3b14610836578063e6a20ae614610856578063eab45d9c1461086b57600080fd5b8063b9818be111610113578063b9818be1146106e6578063baf3292d1461070c578063c83330ce1461072c578063c8598dca14610782578063cbed8b9c146107a2578063cfd6528e146107c257600080fd5b8063a65f92731461062a578063a6c3d16514610669578063abe685cd14610689578063b214dd291461069f578063b353aaa7146106b257600080fd5b80635b8c41e6116101f3578063857749b0116101ac578063857749b0146105375780638cfd8f5c1461056b5780638da5cb5b146105a35780639358928b146105d5578063950c8a74146105ea5780639f38369a1461060a57600080fd5b80635b8c41e6146104175780636096cc581461046657806366ad5c8a146104b5578063715018a6146104d55780637533d788146104ea57806379c0ad4b1461051757600080fd5b80633d8b38f6116102455780633d8b38f61461034d57806342d65a8d1461036d578063447705151461038d5780634b104eff146103b05780634c42899a146103d05780635a359dc5146103f757600080fd5b80621d35671461028157806301ffc9a7146102a357806307e0db17146102d857806310ddb137146102f85780632a205e3d14610318575b600080fd5b34801561028d57600080fd5b506102a161029c366004613ae3565b610958565b005b3480156102af57600080fd5b506102c36102be366004613b76565b610b89565b60405190151581526020015b60405180910390f35b3480156102e457600080fd5b506102a16102f3366004613ba0565b610bc0565b34801561030457600080fd5b506102a1610313366004613ba0565b610c49565b34801561032457600080fd5b50610338610333366004613bc9565b610ca1565b604080519283526020830191909152016102cf565b34801561035957600080fd5b506102c3610368366004613c67565b610cc3565b34801561037957600080fd5b506102a1610388366004613c67565b610d90565b34801561039957600080fd5b506103a2600081565b6040519081526020016102cf565b3480156103bc57600080fd5b506102a16103cb366004613cd9565b610e16565b3480156103dc57600080fd5b506103e5600081565b60405160ff90911681526020016102cf565b34801561040357600080fd5b506102a1610412366004613ba0565b610ed3565b34801561042357600080fd5b506103a2610432366004613d63565b6004602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561047257600080fd5b506103a2610481366004613d63565b6006602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156104c157600080fd5b506102a16104d0366004613ae3565b610f45565b3480156104e157600080fd5b506102a1611021565b3480156104f657600080fd5b5061050a610505366004613ba0565b611035565b6040516102cf9190613e5b565b34801561052357600080fd5b506102a1610532366004613e6e565b6110cf565b34801561054357600080fd5b506103e57f000000000000000000000000000000000000000000000000000000000000000081565b34801561057757600080fd5b506103a2610586366004613eaa565b600260209081526000928352604080842090915290825290205481565b3480156105af57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102cf565b3480156105e157600080fd5b506103a261118b565b3480156105f657600080fd5b506003546105bd906001600160a01b031681565b34801561061657600080fd5b5061050a610625366004613ba0565b6112a7565b34801561063657600080fd5b5060085461065190600160b01b90046001600160401b031681565b6040516001600160401b0390911681526020016102cf565b34801561067557600080fd5b506102a1610684366004613c67565b6113b7565b34801561069557600080fd5b506103a261271081565b6102a16106ad366004613ef5565b61143d565b3480156106be57600080fd5b506105bd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106f257600080fd5b506008546105bd906201000090046001600160a01b031681565b34801561071857600080fd5b506102a1610727366004613cd9565b611511565b34801561073857600080fd5b50610768610747366004613ba0565b60076020526000908152604090205461ffff81169062010000900460ff1682565b6040805161ffff90931683529015156020830152016102cf565b34801561078e57600080fd5b5061033861079d366004613f94565b611567565b3480156107ae57600080fd5b506102a16107bd366004614072565b61158f565b3480156107ce57600080fd5b506102a16107dd3660046140e0565b611624565b6102a16107f0366004614198565b611642565b6102a1610803366004613ae3565b61171a565b34801561081457600080fd5b506008546108239061ffff1681565b60405161ffff90911681526020016102cf565b34801561084257600080fd5b506102a1610851366004614273565b611930565b34801561086257600080fd5b506103e5600181565b34801561087757600080fd5b506102a16108863660046142af565b6119e2565b34801561089757600080fd5b506102a16108a6366004613c67565b611a2b565b3480156108b757600080fd5b506103a26108c63660046142cc565b611a85565b3480156108d757600080fd5b506005546102c39060ff1681565b3480156108f157600080fd5b506102a1610900366004613cd9565b611b17565b34801561091157600080fd5b5061050a6109203660046142f6565b611b90565b34801561093157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006105bd565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109d55760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff8616600090815260016020526040812080546109f390614343565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1f90614343565b8015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b50505050509050805186869050148015610a87575060008151115b8015610aaf575080516020820120604051610aa59088908890614378565b6040518091039020145b610b0a5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b60648201526084016109cc565b610b808787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250611c4192505050565b50505050505050565b60006001600160e01b0319821663031e0c0560e51b1480610bba57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610bc8611d4b565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b5050505050565b610c51611d4b565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610c14565b600080610cb389898989898989611da5565b9150915097509795505050505050565b61ffff831660009081526001602052604081208054829190610ce490614343565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1090614343565b8015610d5d5780601f10610d3257610100808354040283529160200191610d5d565b820191906000526020600020905b815481529060010190602001808311610d4057829003601f168201915b505050505090508383604051610d74929190614378565b60405180910390208180519060200120149150505b9392505050565b610d98611d4b565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610de8908690869086906004016143b1565b600060405180830381600087803b158015610e0257600080fd5b505af1158015610b80573d6000803e3d6000fd5b610e1e611d4b565b6001600160a01b038116610e745760405162461bcd60e51b815260206004820152601d60248201527f4f46544665653a206665654f776e65722063616e6e6f7420626520307800000060448201526064016109cc565b6008805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527f047912631afa564eebd3db2efe191a0dec62da1fede6bbbc1ffc89d87845b1b5906020015b60405180910390a150565b610edb611d4b565b6127108161ffff161115610f015760405162461bcd60e51b81526004016109cc906143cf565b6008805461ffff191661ffff83169081179091556040519081527fd56fd0f83a512cb4e34baf78b277f71fe2e27ccfc0e1c469c345f4cee340766290602001610ec8565b333014610fa35760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b60648201526084016109cc565b6110198686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250611e9e92505050565b505050505050565b611029611d4b565b6110336000611f25565b565b6001602052600090815260409020805461104e90614343565b80601f016020809104026020016040519081016040528092919081815260200182805461107a90614343565b80156110c75780601f1061109c576101008083540402835291602001916110c7565b820191906000526020600020905b8154815290600101906020018083116110aa57829003601f168201915b505050505081565b6110d7611d4b565b6127108161ffff1611156110fd5760405162461bcd60e51b81526004016109cc906143cf565b60408051808201825261ffff83811680835285151560208085018281528985166000818152600784528890209651875492511515620100000262ffffff1990931696169590951717909455845192835292820192909252918201527fdd9c9685af3e6dcb56d8f4b88d2595d4add6837a150034e7781c46b6dcf8aaab906060015b60405180910390a1505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190614417565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190614417565b6112a29190614446565b905090565b61ffff81166000908152600160205260408120805460609291906112ca90614343565b80601f01602080910402602001604051908101604052809291908181526020018280546112f690614343565b80156113435780601f1061131857610100808354040283529160200191611343565b820191906000526020600020905b81548152906001019060200180831161132657829003601f168201915b5050505050905080516000141561139c5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f726400000060448201526064016109cc565b610d896000601483516113af9190614446565b839190611f75565b6113bf611d4b565b8181306040516020016113d49392919061445d565b60408051601f1981840301815291815261ffff8516600090815260016020908152919020825161140993919290910190613960565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce83838360405161117e939291906143b1565b611448878785612082565b50809350506114ef878787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992506114989150506020870187613cd9565b6114a86040880160208901613cd9565b6114b56040890189614483565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120c992505050565b925081831015610b805760405162461bcd60e51b81526004016109cc906144c9565b611519611d4b565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610ec8565b60008061157c8c8c8c8c8c8c8c8c8c8c612164565b915091509a509a98505050505050505050565b611597611d4b565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906115eb9088908890889088908890600401614516565b600060405180830381600087803b15801561160557600080fd5b505af1158015611619573d6000803e3d6000fd5b505050505050505050565b6116368a8a8a8a8a8a8a8a8a8a612263565b50505050505050505050565b61164d8a8a88612082565b50809650506116f88a8a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508a9150899050886116a160208a018a613cd9565b6116b160408b0160208c01613cd9565b6116be60408c018c614483565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061249592505050565b9550848610156116365760405162461bcd60e51b81526004016109cc906144c9565b61ffff8616600090815260046020526040808220905161173d9088908890614378565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806117bd5760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b60648201526084016109cc565b8083836040516117ce929190614378565b60405180910390201461182d5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b60648201526084016109cc565b61ffff871660009081526004602052604080822090516118509089908990614378565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f880182900482028301820190528682526118e8918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250611e9e92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e5878787878560405161191f959493929190614544565b60405180910390a150505050505050565b611938611d4b565b600081116119805760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b60448201526064016109cc565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac09060600161117e565b6119ea611d4b565b6005805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490602001610ec8565b611a33611d4b565b61ffff83166000908152600160205260409020611a519083836139e4565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161117e939291906143b1565b61ffff828116600090815260076020908152604080832081518083019092525493841681526201000090930460ff1615801591840191909152909190611aea57805161271090611ad99061ffff168561457f565b611ae391906145b4565b9150611b10565b60085461ffff1615611b0b5760085461271090611ad99061ffff168561457f565b600091505b5092915050565b611b1f611d4b565b6001600160a01b038116611b845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109cc565b611b8d81611f25565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015611c10573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c3891908101906145c8565b95945050505050565b600080611ca45a60966366ad5c8a60e01b89898989604051602401611c699493929190614635565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190612546565b9150915081611019578280519060200120600460008861ffff1661ffff16815260200190815260200160002086604051611cde9190614673565b9081526040805191829003602090810183206001600160401b0389166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90611d3b908890889088908890879061468f565b60405180910390a1505050505050565b6000546001600160a01b031633146110335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109cc565b6000806000611df489898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611def92508b91506125d09050565b612656565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090611e4d908d90309086908c908c908c906004016146ed565b6040805180830381865afa158015611e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8d9190614743565b925092505097509795505050505050565b6000611eaa8282612688565b905060ff8116611ec557611ec0858585856126e4565b610c42565b60ff811660011415611edd57611ec0858585856127ae565b60405162461bcd60e51b815260206004820152601c60248201527f4f4654436f72653a20756e6b6e6f776e207061636b657420747970650000000060448201526064016109cc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081611f8381601f614767565b1015611fc25760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016109cc565b611fcc8284614767565b845110156120105760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016109cc565b60608215801561202f5760405191506000825260208201604052612079565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612068578051835260209283019201612050565b5050858452601f01601f1916604052505b50949350505050565b60008061208f8484611a85565b905061209b8184614446565b915080156120c1576008546120c19086906201000090046001600160a01b0316836128eb565b935093915050565b60006120d787828481612988565b6120e085612a02565b5090506120ef88888884612a42565b9050600061210087611def846125d0565b9050612110888287878734612ca8565b886001600160a01b03168861ffff167f39a4c66499bcf4b56d79f0dde8ed7a9d4925a0df55825206b2b8531e202be0d0898560405161215092919061477f565b60405180910390a350979650505050505050565b60008060006121b7338d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506121af92508f91506125d09050565b8c8c8c612e35565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340a7bb108e30848a8a8a6040518763ffffffff1660e01b815260040161220f969594939291906146ed565b6040805180830381865afa15801561222b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224f9190614743565b92509250509a509a98505050505050505050565b61ffff8a166000908152600660205260408082209051612286908c908c90614378565b90815260408051602092819003830190206001600160401b038b16600090815292529020549050806123065760405162461bcd60e51b815260206004820152602360248201527f4f4654436f72653a206e6f206661696c6564206d65737361676520746f20726560448201526274727960e81b60648201526084016109cc565b6000878787878787604051602001612323969594939291906147a1565b6040516020818303038152906040528051906020012090508181146123985760405162461bcd60e51b815260206004820152602560248201527f4f4654436f72653a206661696c6564206d6573736167652068617368206d69736044820152640dac2e8c6d60db1b60648201526084016109cc565b61ffff8c166000908152600660205260409081902090516123bc908d908d90614378565b9081526040805191829003602090810183206001600160401b038d16600090815291529081205563147a7d7160e01b81526001600160a01b0387169063147a7d719061241c908f908f908f908f908f908f908e908e908e906004016147de565b600060405180830381600087803b15801561243657600080fd5b505af115801561244a573d6000803e3d6000fd5b505050507f41ea88d75e53240e2c5ace3a3d7263efe6c8f4fe42c0e3ef269f71daef1001c88160405161247f91815260200190565b60405180910390a1505050505050505050505050565b60006124ad8a6001846001600160401b038916612988565b6124b688612a02565b5090506124c58b8b8b84612a42565b905060006124df338b6124d7856125d0565b8b8b8b612e35565b90506124ef8b8287878734612ca8565b8b6001600160a01b03168b61ffff167f39a4c66499bcf4b56d79f0dde8ed7a9d4925a0df55825206b2b8531e202be0d08c8560405161252f92919061477f565b60405180910390a3509a9950505050505050505050565b6000606060008060008661ffff166001600160401b0381111561256b5761256b613cf6565b6040519080825280601f01601f191660200182016040528015612595576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156125b7578692505b828152826000602083013e909890975095505050505050565b6000806125fd7f0000000000000000000000000000000000000000000000000000000000000000846145b4565b90506001600160401b03811115610bba5760405162461bcd60e51b815260206004820152601a60248201527f4f4654436f72653a20616d6f756e745344206f766572666c6f7700000000000060448201526064016109cc565b60606000835184846040516020016126719493929190614849565b604051602081830303815290604052905092915050565b6000612695826001614767565b835110156126db5760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b60448201526064016109cc565b50016001015190565b6000806126f083612e79565b9150915060008061270084612f13565b9150915081612741577fa3c8cf09cc0c729a96662c0de5e58fad3e4df68c58c29ab1f90982adfc992169846040516127389190613e5b565b60405180910390a15b600061274c84612f58565b9050612759898383612f8d565b9050816001600160a01b03168961ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8360405161279b91815260200190565b60405180910390a3505050505050505050565b60008060008060006127bf8661314a565b945094509450945094506000806127d586612f13565b9150915060006127e486612f58565b90506127f18c8383612f8d565b9050816001600160a01b03168c61ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8360405161283391815260200190565b60405180910390a382612884577fa3c8cf09cc0c729a96662c0de5e58fad3e4df68c58c29ab1f90982adfc9921698760405161286f9190613e5b565b60405180910390a150505050505050506128e5565b6001600160a01b0382163b6128cc576040516001600160a01b03831681527f9aedf5fdba8716db3b6705ca00150643309995d4f818a249ed6dde6677e7792d9060200161286f565b6128dc8c8c8c8b86868b8b6132aa565b50505050505050505b50505050565b6001600160a01b038316331461294e5760405162461bcd60e51b815260206004820152602260248201527f50726f78794f46543a206f776e6572206973206e6f742073656e642063616c6c60448201526132b960f11b60648201526084016109cc565b6129836001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848484613475565b505050565b60055460ff16156129a45761299f848484846134e0565b6128e5565b8151156128e55760405162461bcd60e51b815260206004820152602660248201527f4f4654436f72653a205f61646170746572506172616d73206d7573742062652060448201526532b6b83a3c9760d11b60648201526084016109cc565b600080612a2f7f00000000000000000000000000000000000000000000000000000000000000008461489f565b9050612a3b8184614446565b9150915091565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612acf9190614417565b9050612adc8630856128eb565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b669190614417565b612b709190614446565b9250600080612b7e85612a02565b90925090508015612bbd57612bbd6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001689836135bf565b6000612bc8836125d0565b6008549091506001600160401b0380831691612bee91600160b01b9091048116906148b3565b6001600160401b03161015612c515760405162461bcd60e51b815260206004820152602360248201527f50726f78794f46543a206f7574626f756e64416d6f756e745344206f766572666044820152626c6f7760e81b60648201526084016109cc565b80600860168282829054906101000a90046001600160401b0316612c7591906148db565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555082945050505050949350505050565b61ffff861660009081526001602052604081208054612cc690614343565b80601f0160208091040260200160405190810160405280929190818152602001828054612cf290614343565b8015612d3f5780601f10612d1457610100808354040283529160200191612d3f565b820191906000526020600020905b815481529060010190602001808311612d2257829003601f168201915b50505050509050805160001415612db15760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b60648201526084016109cc565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490612e08908b9086908c908c908c908c90600401614906565b6000604051808303818588803b158015612e2157600080fd5b505af11580156128dc573d6000803e3d6000fd5b8451604051606091612e5e9160019190899089906014908d908a908c9082908c90602001614960565b60405160208183030381529060405290509695505050505050565b6060600080612e888482612688565b60ff1614612ed35760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b60448201526064016109cc565b6000612ee0846001612688565b9050612ef184600260ff8416611f75565b9250612f0b612f01826002614a0a565b859060ff166135ef565b915050915091565b6000808251601414612f2c575060009261dead92509050565b6000612f38848261364c565b90506001600160a01b038116612f4d575061dead5b600194909350915050565b6000610bba7f00000000000000000000000000000000000000000000000000000000000000006001600160401b03841661457f565b6000612f98826125d0565b60088054601690612fba908490600160b01b90046001600160401b03166148b3565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161303b91906001600160a01b0391909116815260200190565b602060405180830381865afa158015613058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307c9190614417565b90506130b26001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685856135bf565b6040516370a0823160e01b81526001600160a01b03858116600483015282917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa15801561311c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131409190614417565b611c389190614446565b60608060008181600161315d8783612688565b60ff16146131a85760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b60448201526064016109cc565b60006131b5876001612688565b90506131c687600260ff8416611f75565b94506131e06131d6826002614a0a565b889060ff166135ef565b935060006131fc6131f283600a614a0a565b899060ff16612688565b905061321b61320c83600b614a0a565b899060ff908116908416611f75565b965060006132428261322e85600b614a0a565b6132389190614a0a565b8a9060ff16612688565b905061326c8261325385600c614a0a565b61325d9190614a0a565b8a9060ff908116908416611f75565b945061329c818361327e86600c614a0a565b6132889190614a0a565b6132929190614a0a565b8a9060ff166135ef565b935050505091939590929450565b600080613323836001600160401b0316609663147a7d7160e01b8d8d8d8d8c8c6040516024016132df96959493929190614a2f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b038a16929190612546565b91509150816133f757868686866040516020016133439493929190614a87565b60408051601f19818403018152828252805160209182012061ffff8e1660009081526006909252919020909161337a908c90614673565b9081526040805191829003602090810183206001600160401b038d166000908152915220919091556001600160a01b0387169061ffff8c16907f95c1ad3ef50dd05e668d7b80e9a723079395ac4867a4050552d5d9219e683d74906133ea908d908d908d908c908c908a90614ac2565b60405180910390a3611636565b6000878787876040516020016134109493929190614a87565b6040516020818303038152906040528051906020012090508a61ffff167fb8890edbfc1c74692f527444645f95489c3703cc2df42e4a366f5d06fa6cd8848b8b8460405161346093929190614b24565b60405180910390a25050505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526128e59085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526136b1565b60006134eb83613783565b61ffff80871660009081526002602090815260408083209389168352929052908120549192509061351d908490614767565b90506000811161356f5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f742073657400000000000060448201526064016109cc565b808210156110195760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f77000000000060448201526064016109cc565b6040516001600160a01b03831660248201526044810182905261298390849063a9059cbb60e01b906064016134a9565b60006135fc826008614767565b835110156136435760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b60448201526064016109cc565b50016008015190565b6000613659826014614767565b835110156136a15760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016109cc565b500160200151600160601b900490565b6000613706826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137df9092919063ffffffff16565b80519091501561298357808060200190518101906137249190614b52565b6129835760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109cc565b60006022825110156137d75760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d730000000060448201526064016109cc565b506022015190565b60606137ee84846000856137f6565b949350505050565b6060824710156138575760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109cc565b6001600160a01b0385163b6138ae5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109cc565b600080866001600160a01b031685876040516138ca9190614673565b60006040518083038185875af1925050503d8060008114613907576040519150601f19603f3d011682016040523d82523d6000602084013e61390c565b606091505b509150915061391c828286613927565b979650505050505050565b60608315613936575081610d89565b8251156139465782518084602001fd5b8160405162461bcd60e51b81526004016109cc9190613e5b565b82805461396c90614343565b90600052602060002090601f01602090048101928261398e57600085556139d4565b82601f106139a757805160ff19168380011785556139d4565b828001600101855582156139d4579182015b828111156139d45782518255916020019190600101906139b9565b506139e0929150613a58565b5090565b8280546139f090614343565b90600052602060002090601f016020900481019282613a1257600085556139d4565b82601f10613a2b5782800160ff198235161785556139d4565b828001600101855582156139d4579182015b828111156139d4578235825591602001919060010190613a3d565b5b808211156139e05760008155600101613a59565b803561ffff81168114613a7f57600080fd5b919050565b60008083601f840112613a9657600080fd5b5081356001600160401b03811115613aad57600080fd5b602083019150836020828501011115613ac557600080fd5b9250929050565b80356001600160401b0381168114613a7f57600080fd5b60008060008060008060808789031215613afc57600080fd5b613b0587613a6d565b955060208701356001600160401b0380821115613b2157600080fd5b613b2d8a838b01613a84565b9097509550859150613b4160408a01613acc565b94506060890135915080821115613b5757600080fd5b50613b6489828a01613a84565b979a9699509497509295939492505050565b600060208284031215613b8857600080fd5b81356001600160e01b031981168114610d8957600080fd5b600060208284031215613bb257600080fd5b610d8982613a6d565b8015158114611b8d57600080fd5b600080600080600080600060a0888a031215613be457600080fd5b613bed88613a6d565b965060208801356001600160401b0380821115613c0957600080fd5b613c158b838c01613a84565b909850965060408a0135955060608a01359150613c3182613bbb565b90935060808901359080821115613c4757600080fd5b50613c548a828b01613a84565b989b979a50959850939692959293505050565b600080600060408486031215613c7c57600080fd5b613c8584613a6d565b925060208401356001600160401b03811115613ca057600080fd5b613cac86828701613a84565b9497909650939450505050565b6001600160a01b0381168114611b8d57600080fd5b8035613a7f81613cb9565b600060208284031215613ceb57600080fd5b8135610d8981613cb9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613d3457613d34613cf6565b604052919050565b60006001600160401b03821115613d5557613d55613cf6565b50601f01601f191660200190565b600080600060608486031215613d7857600080fd5b613d8184613a6d565b925060208401356001600160401b03811115613d9c57600080fd5b8401601f81018613613dad57600080fd5b8035613dc0613dbb82613d3c565b613d0c565b818152876020838501011115613dd557600080fd5b81602084016020830137600060208383010152809450505050613dfa60408501613acc565b90509250925092565b60005b83811015613e1e578181015183820152602001613e06565b838111156128e55750506000910152565b60008151808452613e47816020860160208601613e03565b601f01601f19169290920160200192915050565b602081526000610d896020830184613e2f565b600080600060608486031215613e8357600080fd5b613e8c84613a6d565b92506020840135613e9c81613bbb565b9150613dfa60408501613a6d565b60008060408385031215613ebd57600080fd5b613ec683613a6d565b9150613ed460208401613a6d565b90509250929050565b600060608284031215613eef57600080fd5b50919050565b600080600080600080600060c0888a031215613f1057600080fd5b8735613f1b81613cb9565b9650613f2960208901613a6d565b955060408801356001600160401b0380821115613f4557600080fd5b613f518b838c01613a84565b909750955060608a0135945060808a0135935060a08a0135915080821115613f7857600080fd5b50613f858a828b01613edd565b91505092959891949750929550565b60008060008060008060008060008060e08b8d031215613fb357600080fd5b613fbc8b613a6d565b995060208b01356001600160401b0380821115613fd857600080fd5b613fe48e838f01613a84565b909b50995060408d0135985060608d013591508082111561400457600080fd5b6140108e838f01613a84565b909850965086915061402460808e01613acc565b955060a08d0135915061403682613bbb565b90935060c08c0135908082111561404c57600080fd5b506140598d828e01613a84565b915080935050809150509295989b9194979a5092959850565b60008060008060006080868803121561408a57600080fd5b61409386613a6d565b94506140a160208701613a6d565b93506040860135925060608601356001600160401b038111156140c357600080fd5b6140cf88828901613a84565b969995985093965092949392505050565b60008060008060008060008060008060e08b8d0312156140ff57600080fd5b6141088b613a6d565b995060208b01356001600160401b038082111561412457600080fd5b6141308e838f01613a84565b909b50995089915061414460408e01613acc565b985060608d013591508082111561415a57600080fd5b6141668e838f01613a84565b909850965060808d0135915061417b82613cb9565b90945060a08c0135935060c08c0135908082111561404c57600080fd5b6000806000806000806000806000806101008b8d0312156141b857600080fd5b6141c18b613cce565b99506141cf60208c01613a6d565b985060408b01356001600160401b03808211156141eb57600080fd5b6141f78e838f01613a84565b909a50985060608d0135975060808d0135965060a08d013591508082111561421e57600080fd5b61422a8e838f01613a84565b909650945084915061423e60c08e01613acc565b935060e08d013591508082111561425457600080fd5b506142618d828e01613edd565b9150509295989b9194979a5092959850565b60008060006060848603121561428857600080fd5b61429184613a6d565b925061429f60208501613a6d565b9150604084013590509250925092565b6000602082840312156142c157600080fd5b8135610d8981613bbb565b600080604083850312156142df57600080fd5b6142e883613a6d565b946020939093013593505050565b6000806000806080858703121561430c57600080fd5b61431585613a6d565b935061432360208601613a6d565b9250604085013561433381613cb9565b9396929550929360600135925050565b600181811c9082168061435757607f821691505b60208210811415613eef57634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000611c38604083018486614388565b60208082526028908201527f4f46544665653a20666565206270206d757374206265203c3d2042505f44454e60408201526727a6a4a720aa27a960c11b606082015260800190565b60006020828403121561442957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561445857614458614430565b500390565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b6000808335601e1984360301811261449a57600080fd5b8301803591506001600160401b038211156144b457600080fd5b602001915036819003821315613ac557600080fd5b6020808252602d908201527f426173654f4654576974684665653a20616d6f756e74206973206c657373207460408201526c1a185b881b5a5b905b5bdd5b9d609a1b606082015260800190565b600061ffff80881683528087166020840152508460408301526080606083015261391c608083018486614388565b61ffff86168152608060208201526000614562608083018688614388565b6001600160401b0394909416604083015250606001529392505050565b600081600019048311821515161561459957614599614430565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826145c3576145c361459e565b500490565b6000602082840312156145da57600080fd5b81516001600160401b038111156145f057600080fd5b8201601f8101841361460157600080fd5b805161460f613dbb82613d3c565b81815285602083850101111561462457600080fd5b611c38826020830160208601613e03565b61ffff851681526080602082015260006146526080830186613e2f565b6001600160401b0385166040840152828103606084015261391c8185613e2f565b60008251614685818460208701613e03565b9190910192915050565b61ffff8616815260a0602082015260006146ac60a0830187613e2f565b6001600160401b038616604084015282810360608401526146cd8186613e2f565b905082810360808401526146e18185613e2f565b98975050505050505050565b61ffff871681526001600160a01b038616602082015260a06040820181905260009061471b90830187613e2f565b85151560608401528281036080840152614736818587614388565b9998505050505050505050565b6000806040838503121561475657600080fd5b505080516020909101519092909150565b6000821982111561477a5761477a614430565b500190565b6040815260006147926040830185613e2f565b90508260208301529392505050565b6080815260006147b560808301888a614388565b6001600160a01b0387166020840152604083018690528281036060840152614736818587614388565b61ffff8a16815260c0602082015260006147fc60c083018a8c614388565b6001600160401b0389166040840152828103606084015261481e81888a614388565b905085608084015282810360a0840152614839818587614388565b9c9b505050505050505050505050565b600060ff60f81b808760f81b168352808660f81b166001840152508351614877816002850160208801613e03565b60c09390931b6001600160c01b03191660029290930191820192909252600a01949350505050565b6000826148ae576148ae61459e565b500690565b60006001600160401b03838116908316818110156148d3576148d3614430565b039392505050565b60006001600160401b038083168185168083038211156148fd576148fd614430565b01949350505050565b61ffff8716815260c06020820152600061492360c0830188613e2f565b82810360408401526149358188613e2f565b6001600160a01b0387811660608601528616608085015283810360a085015290506147368185613e2f565b600060ff60f81b808d60f81b168352808c60f81b1660018401528a5161498d816002860160208f01613e03565b60c08b901b6001600160c01b03191660029185019182015260f88a811b8316600a83015260608a901b6bffffffffffffffffffffffff1916600b83015288901b8216601f8201528587602083013760c085901b6001600160c01b031916908601602081019182529150506028019c9b505050505050505050505050565b600060ff821660ff84168060ff03821115614a2757614a27614430565b019392505050565b61ffff8716815260c060208201526000614a4c60c0830188613e2f565b6001600160401b03871660408401528281036060840152614a6d8187613e2f565b905084608084015282810360a08401526147368185613e2f565b608081526000614a9a6080830187613e2f565b6001600160a01b038616602084015260408301859052828103606084015261391c8185613e2f565b60c081526000614ad560c0830189613e2f565b6001600160401b03881660208401528281036040840152614af68188613e2f565b90508560608401528281036080840152614b108186613e2f565b905082810360a08401526147368185613e2f565b606081526000614b376060830186613e2f565b6001600160401b039490941660208301525060400152919050565b600060208284031215614b6457600080fd5b8151610d8981613bbb56fea264697066735822122055c9454c0a18beaa8702d75fcb3b4e7eda1a2f6ff47e80e460324bf5baada6b164736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "circulatingSupply()": {
        "details": "returns the circulating amount of tokens on current chain"
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "details": "estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _amount - amount of the tokens to transfer _useZro - indicates to use zro to pay L0 fees _adapterParam - flexible bytes array to indicate messaging adapter services in L0"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendFrom(address,uint16,bytes,uint256,uint256,(address,address,bytes))": {
        "details": "send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from` `_from` the owner of token `_dstChainId` the destination chain identifier `_toAddress` can be any size depending on the `dstChainId`. `_amount` the quantity of tokens in wei `_minAmount` the minimum amount of tokens to receive on dstChain `_refundAddress` the address LayerZero refunds if too much message fee is sent `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"
      },
      "token()": {
        "details": "returns the address of the ERC20 token"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3583,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 212,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 218,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 220,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "precrime",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "failedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 1066,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "useCustomAdapterParams",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 1074,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "failedOFTReceivedMessages",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 2438,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "chainIdToFeeBps",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_struct(FeeConfig)2447_storage)"
      },
      {
        "astId": 2440,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "defaultFeeBp",
        "offset": 0,
        "slot": "8",
        "type": "t_uint16"
      },
      {
        "astId": 2442,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "feeOwner",
        "offset": 2,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2884,
        "contract": "contracts/ProxyOFT.sol:ProxyOFT",
        "label": "outboundAmountSD",
        "offset": 22,
        "slot": "8",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_struct(FeeConfig)2447_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct Fee.FeeConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeConfig)2447_storage"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(FeeConfig)2447_storage": {
        "encoding": "inplace",
        "label": "struct Fee.FeeConfig",
        "members": [
          {
            "astId": 2444,
            "contract": "contracts/ProxyOFT.sol:ProxyOFT",
            "label": "feeBP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2446,
            "contract": "contracts/ProxyOFT.sol:ProxyOFT",
            "label": "enabled",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}